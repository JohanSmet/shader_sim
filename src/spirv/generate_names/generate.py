#!/usr/bin/env python3

import spirv
import operator

g_prototypes = []
g_arrays = []

def generate_h_header():
    print("// spirv_names.h - Johan Smet - Public Domain (see LICENSE)")
    print("//")
    print("// converts SPIR-V enums to strings")
    print("// (do not edit - autogenerated by spirv/generate_names/generate.py)")
    print("")
    print("#ifndef JS_SPIRV_NAMES_H")
    print("#define JS_SPIRV_NAMES_H")
    print("")
    print("#include \"spirv.h\"")

def generate_c_header():
    print("// spirv_names.c - Johan Smet - Public Domain (see LICENSE)")
    print("//")
    print("// converts SPIR-V enums to strings")
    print("// (do not edit - autogenerated by spirv/generate_names/generate.py)")
    print("")

def generate_h_footer():
    print("")
    print("#endif // JS_SPIRV_NAMES_H")

def generate_function_declarations():
    print("")
    for p in g_prototypes:
        print(p)

def generate_enum(enum, c_array, c_function, c_enum, c_prefix, c_postfix = ''):
    print("")
    print("const char *{}[] = {{".format(c_array))

    enums = sorted(spirv.spv[enum].items(), key=operator.itemgetter(1))

    for t in enums:
        e = t[0]
        if c_postfix == 'Mask' and e == 'MaskNone':
            print("\t[{0}{1}] = \"None\",".format(c_prefix, e))
        elif c_prefix == 'SpvDim' and e[:3] == 'Dim':
            print("\t[Spv{0}{1}] = \"{0}\",".format(e, c_postfix))
        else:
            print("\t[{0}{1}{2}] = \"{1}\",".format(c_prefix, e, c_postfix))

    print("};")
    print("")
    print("const char *{0}({1} e) {{".format(c_function, c_enum))
    print("\treturn {0}[e];".format(c_array))
    print("}")

    g_prototypes.append("const char *{0}({1} e);".format(c_function, c_enum))
    print("extern const char *{0}[];".format(c_array))

if __name__ == "__main__":
    generate_h_header()
    print("")
    print("#ifdef JS_SPIRV_NAMES_IMPLEMENTATION")
    generate_enum('SourceLanguage', 'SPIRV_SOURCE_LANGUAGES', 'spirv_source_language_name', 'SpvSourceLanguage', 'SpvSourceLanguage')
    generate_enum('ExecutionModel', 'SPIRV_EXECUTION_MODELS', 'spirv_execution_model_name', 'SpvExecutionModel', 'SpvExecutionModel')
    generate_enum('AddressingModel', 'SPIRV_ADDRESSING_MODELS', 'spirv_addressing_model_name', 'SpvAddressingModel', 'SpvAddressingModel')
    generate_enum('MemoryModel', 'SPIRV_MEMORY_MODELS', 'spirv_memory_model_name', 'SpvMemoryModel', 'SpvMemoryModel')
    generate_enum('ExecutionMode', 'SPIRV_EXECUTION_MODES', 'spirv_execution_mode_name', 'SpvExecutionMode', 'SpvExecutionMode')
    generate_enum('Dim', 'SPIRV_DIMS', 'spirv_dim_name', 'SpvDim', 'SpvDim')
    generate_enum('StorageClass', 'SPIRV_STORAGE_CLASSES', 'spirv_storage_class_name', 'SpvStorageClass', 'SpvStorageClass')
    generate_enum('SamplerAddressingMode', 'SPIRV_SAMPLER_ADDRESSING_MODES', 'spirv_sampler_addressing_mode_name', 'SpvSamplerAddressingMode', 'SpvSamplerAddressingMode')
    generate_enum('SamplerFilterMode', 'SPIRV_SAMPLER_FILTER_MODES', 'spirv_sampler_filter_mode_name', 'SpvSamplerFilterMode', 'SpvSamplerFilterMode')
    generate_enum('ImageFormat', 'SPIRV_IMAGE_FORMATS', 'spirv_image_format_name', 'SpvImageFormat', 'SpvImageFormat')
    generate_enum('ImageChannelOrder', 'SPIRV_IMAGE_CHANNEL_ORDERS', 'spirv_image_channel_order_name', 'SpvImageChannelOrder', 'SpvImageChannelOrder')
    generate_enum('ImageChannelDataType', 'SPIRV_IMAGE_CHANNEL_DATATYPES', 'spirv_image_channel_datatype_name', 'SpvImageChannelDataType', 'SpvImageChannelDataType')
    generate_enum('ImageOperandsMask', 'SPIRV_IMAGE_OPERANDS', 'spirv_image_operands_name', 'SpvImageOperandsMask', 'SpvImageOperands', 'Mask')
    generate_enum('FPFastMathModeMask', 'SPIRV_FP_FASTMATH_MODE', 'spirv_fp_fastmath_mode_name', 'SpvFPFastMathModeMask', 'SpvFPFastMathMode', 'Mask')
    generate_enum('FPRoundingMode', 'SPIRV_FP_ROUNDING_MODES', 'spirv_fp_rounding_mode_name', 'SpvFPRoundingMode', 'SpvFPRoundingMode')
    generate_enum('LinkageType', 'SPIRV_LINKAGE_TYPES', 'spirv_linkage_type_name', 'SpvLinkageType', 'SpvLinkageType')
    generate_enum('AccessQualifier', 'SPIRV_ACCESS_QUALIFIERS', 'spirv_access_qualifier_name', 'SpvAccessQualifier', 'SpvAccessQualifier')
    generate_enum('FunctionParameterAttribute', 'SPIRV_FUNCTION_PARAMETER_ATTRIBUTE', 'spirv_function_parameter_attribute_name', 'SpvFunctionParameterAttribute', 'SpvFunctionParameterAttribute')
    generate_enum('Decoration', 'SPIRV_DECORATIONS', 'spirv_decoration_name', 'SpvDecoration', 'SpvDecoration')
    generate_enum('BuiltIn', 'SPIRV_BUILT_INS', 'spirv_builtin_name', 'SpvBuiltIn', 'SpvBuiltIn')
    generate_enum('SelectionControlMask', 'SPIRV_SELECTION_CONTROL', 'spirv_selection_control_name', 'SpvSelectionControlMask', 'SpvSelectionControl', 'Mask')
    generate_enum('LoopControlMask', 'SPIRV_LOOP_CONTROL', 'spirv_loop_control_name', 'SpvLoopControlMask', 'SpvLoopControl', 'Mask')
    generate_enum('FunctionControlMask', 'SPIRV_FUNCTION_CONTROL', 'spirv_function_control_name', 'SpvFunctionControlMask', 'SpvFunctionControl', 'Mask')
    generate_enum('MemorySemanticsMask', 'SPIRV_MEMORY_SEMANTICS', 'spirv_memory_semantics_name', 'SpvMemorySemanticsMask', 'SpvMemorySemantics', 'Mask')
    generate_enum('MemoryAccessMask', 'SPIRV_MEMORY_ACCESS', 'spirv_memory_access_name', 'SpvMemoryAccessMask', 'SpvMemoryAccess', 'Mask')
    generate_enum('Scope', 'SPIRV_SCOPES', 'spirv_scope_name', 'SpvScope', 'SpvScope')
    generate_enum('GroupOperation', 'SPIRV_GROUP_OPERATIONS', 'spirv_group_operation_name', 'SpvGroupOperation', 'SpvGroupOperation')
    generate_enum('KernelEnqueueFlags', 'SPIRV_KERNEL_ENQUEUE_FLAGS', 'spirv_kernel_enqueue_flags_name', 'SpvKernelEnqueueFlags', 'SpvKernelEnqueueFlags')
    generate_enum('KernelProfilingInfoMask', 'SPIRV_KERNEL_PROFILING_INFO', 'spirv_kernel_profiling_info_name', 'SpvKernelProfilingInfoMask', 'SpvKernelProfilingInfo', 'Mask')
    generate_enum('Capability', 'SPIRV_CAPABILITIES', 'spirv_capability_name', 'SpvCapability', 'SpvCapability')
    generate_enum('Op', 'SPIRV_OPS', 'spirv_op_name', 'SpvOp', 'Spv')
    print("")
    print("#endif // JS_SPIRV_NAMES_IMPLEMENTATION")
    generate_function_declarations()
    print("")
    generate_h_footer()